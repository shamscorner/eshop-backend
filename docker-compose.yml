version: '3.8'

services:
  mongodb:
    image: mongo:7
    container_name: eshop-mongodb
    restart: unless-stopped
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb_data:/data/db
    networks:
      - eshop-network
    healthcheck:
      test: ['CMD', 'mongosh', '--quiet', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
    container_name: eshop-auth-service
    restart: unless-stopped
    ports:
      - '50051:50051'
    environment:
      - JWT_SECRET=dev-secret-key-change-in-production
      - NODE_ENV=production
    networks:
      - eshop-network
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('net').createConnection(50051, 'localhost').on('connect', () => process.exit(0)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: eshop-api-gateway
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      - JWT_SECRET=dev-secret-key-change-in-production
      - AUTH_SERVICE_URL=auth-service:50051
      - NODE_ENV=production
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - eshop-network
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:8080/health',
          '||',
          'exit',
          '1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mongodb_data:
    driver: local

networks:
  eshop-network:
    driver: bridge
