// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { User } from "./common";

export interface LoginDto {
  email: string;
  password: string;
}

export interface LoginResponseDto {
  success: boolean;
  message: string;
  accessToken: string;
  refreshToken: string;
  user:
    | User
    | undefined;
  /** Unix timestamp */
  expiresAt: number;
}

export interface RegisterDto {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
}

export interface RegisterResponseDto {
  success: boolean;
  message: string;
  user: User | undefined;
}

export interface RefreshTokenDto {
  refreshToken: string;
}

export interface RefreshTokenResponseDto {
  success: boolean;
  message: string;
  accessToken: string;
  refreshToken: string;
  /** Unix timestamp */
  expiresAt: number;
}

export interface LogoutDto {
  userId: string;
  accessToken: string;
}

export interface LogoutResponseDto {
  success: boolean;
  message: string;
}

export interface VerifyTokenDto {
  accessToken: string;
}

export interface VerifyTokenResponseDto {
  valid: boolean;
  userId: string;
  email: string;
  /** Unix timestamp */
  expiresAt: number;
}

export interface AuthServiceClient {
  login(request: LoginDto): Observable<LoginResponseDto>;

  register(request: RegisterDto): Observable<RegisterResponseDto>;

  refreshToken(request: RefreshTokenDto): Observable<RefreshTokenResponseDto>;

  logout(request: LogoutDto): Observable<LogoutResponseDto>;

  verifyToken(request: VerifyTokenDto): Observable<VerifyTokenResponseDto>;
}

export interface AuthServiceController {
  login(request: LoginDto): Promise<LoginResponseDto> | Observable<LoginResponseDto> | LoginResponseDto;

  register(request: RegisterDto): Promise<RegisterResponseDto> | Observable<RegisterResponseDto> | RegisterResponseDto;

  refreshToken(
    request: RefreshTokenDto,
  ): Promise<RefreshTokenResponseDto> | Observable<RefreshTokenResponseDto> | RefreshTokenResponseDto;

  logout(request: LogoutDto): Promise<LogoutResponseDto> | Observable<LogoutResponseDto> | LogoutResponseDto;

  verifyToken(
    request: VerifyTokenDto,
  ): Promise<VerifyTokenResponseDto> | Observable<VerifyTokenResponseDto> | VerifyTokenResponseDto;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["login", "register", "refreshToken", "logout", "verifyToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
